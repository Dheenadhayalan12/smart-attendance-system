service: smart-attendance-system

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  environment:
    DYNAMODB_TABLE_PREFIX: ${self:service}-${opt:stage, self:provider.stage}
    S3_BUCKET: ${self:service}-${opt:stage, self:provider.stage}-storage
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/*"
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
        - s3:DeleteObject
      Resource: "arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*"
    - Effect: Allow
      Action:
        - rekognition:*
      Resource: "*"

plugins:
  - serverless-localstack

custom:
  localstack:
    stages:
      - local
    host: http://localhost
    edgePort: 4566
    autostart: false
    lambda:
      mountCode: true
    docker:
      sudo: false

functions:
  # Authentication functions
  teacherRegister:
    handler: backend/handlers/auth.register
    events:
      - http:
          path: auth/register
          method: post
          cors: true

  teacherLogin:
    handler: backend/handlers/auth.login
    events:
      - http:
          path: auth/login
          method: post
          cors: true

  # Class Management functions
  createClass:
    handler: backend/handlers/classes.createClass
    events:
      - http:
          path: classes
          method: post
          cors: true

  getClasses:
    handler: backend/handlers/classes.getClasses
    events:
      - http:
          path: classes
          method: get
          cors: true

  getClass:
    handler: backend/handlers/classes.getClass
    events:
      - http:
          path: classes/{classId}
          method: get
          cors: true

  updateClass:
    handler: backend/handlers/classes.updateClass
    events:
      - http:
          path: classes/{classId}
          method: put
          cors: true

  deleteClass:
    handler: backend/handlers/classes.deleteClass
    events:
      - http:
          path: classes/{classId}
          method: delete
          cors: true

  # Session Management functions
  createSession:
    handler: backend/handlers/sessions.createSession
    events:
      - http:
          path: sessions
          method: post
          cors: true

  getSessionsByClass:
    handler: backend/handlers/sessions.getSessionsByClass
    events:
      - http:
          path: classes/{classId}/sessions
          method: get
          cors: true

  getSession:
    handler: backend/handlers/sessions.getSession
    events:
      - http:
          path: sessions/{sessionId}
          method: get
          cors: true

  endSession:
    handler: backend/handlers/sessions.endSession
    events:
      - http:
          path: sessions/{sessionId}/end
          method: post
          cors: true

resources:
  Resources:
    # DynamoDB Tables
    TeachersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Teachers
        AttributeDefinitions:
          - AttributeName: teacherId
            AttributeType: S
        KeySchema:
          - AttributeName: teacherId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    ClassesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Classes
        AttributeDefinitions:
          - AttributeName: classId
            AttributeType: S
        KeySchema:
          - AttributeName: classId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    SessionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Sessions
        AttributeDefinitions:
          - AttributeName: sessionId
            AttributeType: S
        KeySchema:
          - AttributeName: sessionId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    StudentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Students
        AttributeDefinitions:
          - AttributeName: studentId
            AttributeType: S
        KeySchema:
          - AttributeName: studentId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    AttendanceTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Attendance
        AttributeDefinitions:
          - AttributeName: attendanceId
            AttributeType: S
        KeySchema:
          - AttributeName: attendanceId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    # S3 Bucket for face images
    FaceImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: smart-attendance-faces
        VersioningConfiguration:
          Status: Enabled
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
