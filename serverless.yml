service: smart-attendance-system

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  environment:
    DYNAMODB_TABLE_PREFIX: ${self:service}-${opt:stage, self:provider.stage}
    S3_BUCKET: ${self:service}-${opt:stage, self:provider.stage}-storage
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/*"
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
        - s3:DeleteObject
      Resource: "arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*"
    - Effect: Allow
      Action:
        - rekognition:*
      Resource: "*"

plugins:
  - serverless-localstack

custom:
  localstack:
    stages:
      - local
    host: http://localhost
    edgePort: 4566
    autostart: false
    lambda:
      mountCode: true
    docker:
      sudo: false

functions:
  # Authentication functions
  teacherRegister:
    handler: backend/handlers/auth.register
    events:
      - http:
          path: auth/register
          method: post
          cors: true

  teacherLogin:
    handler: backend/handlers/auth.login
    events:
      - http:
          path: auth/login
          method: post
          cors: true

  # Class management functions
  createClass:
    handler: backend/handlers/classes.create
    events:
      - http:
          path: classes
          method: post
          cors: true

  getClasses:
    handler: backend/handlers/classes.list
    events:
      - http:
          path: classes
          method: get
          cors: true

  # QR code generation
  generateQR:
    handler: backend/handlers/qr.generate
    events:
      - http:
          path: qr/generate
          method: post
          cors: true

  # Face recognition functions
  registerFace:
    handler: backend/handlers/face.register
    events:
      - http:
          path: face/register
          method: post
          cors: true

  verifyFace:
    handler: backend/handlers/face.verify
    events:
      - http:
          path: face/verify
          method: post
          cors: true

resources:
  Resources:
    # DynamoDB Tables
    TeachersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE_PREFIX}-teachers
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: email-index
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            BillingMode: PAY_PER_REQUEST
        BillingMode: PAY_PER_REQUEST

    ClassesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE_PREFIX}-classes
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: teacherId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: teacher-index
            KeySchema:
              - AttributeName: teacherId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            BillingMode: PAY_PER_REQUEST
        BillingMode: PAY_PER_REQUEST

    StudentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE_PREFIX}-students
        AttributeDefinitions:
          - AttributeName: rollNumber
            AttributeType: S
          - AttributeName: classId
            AttributeType: S
        KeySchema:
          - AttributeName: rollNumber
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: class-index
            KeySchema:
              - AttributeName: classId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            BillingMode: PAY_PER_REQUEST
        BillingMode: PAY_PER_REQUEST

    AttendanceTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE_PREFIX}-attendance
        AttributeDefinitions:
          - AttributeName: sessionId
            AttributeType: S
          - AttributeName: rollNumber
            AttributeType: S
        KeySchema:
          - AttributeName: sessionId
            KeyType: HASH
          - AttributeName: rollNumber
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    # S3 Bucket for storing face images
    StorageBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
              AllowedOrigins:
                - "*"
